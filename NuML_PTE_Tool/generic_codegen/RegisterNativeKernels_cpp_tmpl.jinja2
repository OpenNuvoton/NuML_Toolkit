/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include <executorch/runtime/core/evalue.h>
#include <executorch/runtime/core/exec_aten/exec_aten.h>
#include <executorch/runtime/core/span.h>
#include <executorch/runtime/kernel/operator_registry.h>
#include <executorch/runtime/platform/profiler.h>
#include "Portable/NativeFunctions.h" // Generated Function import headers
#include "Quantized/NativeFunctions.h" // Generated Function import headers

//Copy CPU native kernel operator from RegisterCodegenUnboxedKernelsEverything.cpp to here. These require by NN model

//using KernelArrayRef = ::torch::executor::ArrayRef<::torch::executor::Kernel>;
using KernelSpan = ::executorch::runtime::Span<
    const ::executorch::ET_RUNTIME_NAMESPACE::Kernel>;
namespace torch {
namespace executor {

static Kernel kernels_to_register[] = {
    {% for code in kernel_codes %}
    {{code}}
    {% endfor %}
};

// Explicitly convert to ArrayRef, so that the API can take an empty C array of
// Kernels.
static KernelSpan kernel_span(
    kernels_to_register,
    kernels_to_register + sizeof(kernels_to_register) / sizeof(Kernel));

Error register_all_kernels() {
    Error success_with_kernel_reg = register_kernels(kernel_span);
//    Error success_with_kernel_reg = register_kernels(kernels_to_register);

    if(success_with_kernel_reg != Error::Ok) {
        ET_LOG(Error, "Failed register all kernels");
    }
    return success_with_kernel_reg;
}

}   // namespace executer
}   // namespace torch